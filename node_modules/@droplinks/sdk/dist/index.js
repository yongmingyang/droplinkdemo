"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropLinks = void 0;
const axios_1 = __importDefault(require("axios"));
class DropLinks {
    static init(apiKey) {
        DropLinks.apiKey = apiKey;
        return this;
    }
    static request(method, url, data = undefined, params = undefined) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, axios_1.default)({
                method,
                url: `${this.apiUrl}${url}`,
                data,
                params,
                headers: {
                    "X-API-KEY": this.apiKey,
                },
            })
                .then((response) => response.data)
                .catch((error) => {
                var _a, _b;
                console.error(`droplinks.io returned ${error.response.status}: ${((_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) || error.response.statusText}`);
                throw error;
            });
        });
    }
    static create(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request("POST", `/drop-links/create`, {
                campaign: options.campaign,
                locked: options.locked,
            }).then((response) => {
                const dropLink = response.dropLinks[0];
                return {
                    id: dropLink.id,
                    claimCode: dropLink.claimCode,
                    locked: dropLink.locked,
                    campaignId: dropLink.groupId,
                    publicAddress: dropLink.publicKey,
                    claimLink: dropLink.dropLinkURL,
                    claimed: false,
                };
            });
        });
    }
    static getClaims() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request("GET", "/drop-links/claims").then((response) => {
                const claims = response.claims;
                return claims.map((claim) => {
                    return {
                        id: claim.id,
                        claimedAt: claim.claimedAt,
                        claimedByAccount: claim.claimedByAccount,
                        dropLinkId: claim.dropLinkId,
                        claimLink: claim.claimURL,
                        extraClaimerInfo: claim.extraClaimerInfo,
                    };
                });
            });
        });
    }
    static getDropLinks(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request("GET", "/drop-links", {}, {
                groupId: options.campaignId,
                claimed: options.claimed,
            }).then((response) => {
                const dropLinks = response.dropLinks;
                return dropLinks.map((dropLink) => {
                    return {
                        id: dropLink.id,
                        claimCode: dropLink.claimCode,
                        locked: dropLink.locked,
                        campaignId: dropLink.groupId,
                        publicAddress: dropLink.publicKey,
                        claimLink: dropLink.dropLinkURL,
                        claimed: dropLink.claimed,
                    };
                });
            });
        });
    }
}
exports.DropLinks = DropLinks;
DropLinks.apiUrl = "https://droplinks.io/api/v1";
